// Code generated by MockGen. DO NOT EDIT.
// Source: src/tg_provider/tg.go

// Package tg_provider is a generated GoMock package.
package tg_provider

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockEventProvider is a mock of EventProvider interface.
type MockEventProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEventProviderMockRecorder
}

// MockEventProviderMockRecorder is the mock recorder for MockEventProvider.
type MockEventProviderMockRecorder struct {
	mock *MockEventProvider
}

// NewMockEventProvider creates a new mock instance.
func NewMockEventProvider(ctrl *gomock.Controller) *MockEventProvider {
	mock := &MockEventProvider{ctrl: ctrl}
	mock.recorder = &MockEventProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventProvider) EXPECT() *MockEventProviderMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventProvider) CreateEvent(ctx context.Context, idGroup int32, category, nameEvent string, timeStart time.Time, duration time.Duration, linkToVideo, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, idGroup, category, nameEvent, timeStart, duration, linkToVideo, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventProviderMockRecorder) CreateEvent(ctx, idGroup, category, nameEvent, timeStart, duration, linkToVideo, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventProvider)(nil).CreateEvent), ctx, idGroup, category, nameEvent, timeStart, duration, linkToVideo, status)
}

// DeleteEvent mocks base method.
func (m *MockEventProvider) DeleteEvent(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventProviderMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventProvider)(nil).DeleteEvent), ctx, id)
}

// UpdateEvent mocks base method.
func (m *MockEventProvider) UpdateEvent(ctx context.Context, nameEvent string, timeStart time.Time, duration time.Duration, linkToVideo, status string, idEvent int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, nameEvent, timeStart, duration, linkToVideo, status, idEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventProviderMockRecorder) UpdateEvent(ctx, nameEvent, timeStart, duration, linkToVideo, status, idEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventProvider)(nil).UpdateEvent), ctx, nameEvent, timeStart, duration, linkToVideo, status, idEvent)
}

// MockGroupProvider is a mock of GroupProvider interface.
type MockGroupProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGroupProviderMockRecorder
}

// MockGroupProviderMockRecorder is the mock recorder for MockGroupProvider.
type MockGroupProviderMockRecorder struct {
	mock *MockGroupProvider
}

// NewMockGroupProvider creates a new mock instance.
func NewMockGroupProvider(ctrl *gomock.Controller) *MockGroupProvider {
	mock := &MockGroupProvider{ctrl: ctrl}
	mock.recorder = &MockGroupProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupProvider) EXPECT() *MockGroupProviderMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroupProvider) CreateGroup(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupProviderMockRecorder) CreateGroup(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupProvider)(nil).CreateGroup), ctx, groupName)
}

// DeleteGroup mocks base method.
func (m *MockGroupProvider) DeleteGroup(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupProviderMockRecorder) DeleteGroup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupProvider)(nil).DeleteGroup), ctx, id)
}

// UpdateGroup mocks base method.
func (m *MockGroupProvider) UpdateGroup(ctx context.Context, nameGroup string, idGroup int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, nameGroup, idGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupProviderMockRecorder) UpdateGroup(ctx, nameGroup, idGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupProvider)(nil).UpdateGroup), ctx, nameGroup, idGroup)
}

// MockMembershipProvider is a mock of MembershipProvider interface.
type MockMembershipProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMembershipProviderMockRecorder
}

// MockMembershipProviderMockRecorder is the mock recorder for MockMembershipProvider.
type MockMembershipProviderMockRecorder struct {
	mock *MockMembershipProvider
}

// NewMockMembershipProvider creates a new mock instance.
func NewMockMembershipProvider(ctrl *gomock.Controller) *MockMembershipProvider {
	mock := &MockMembershipProvider{ctrl: ctrl}
	mock.recorder = &MockMembershipProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembershipProvider) EXPECT() *MockMembershipProviderMockRecorder {
	return m.recorder
}

// CreateMembership mocks base method.
func (m *MockMembershipProvider) CreateMembership(ctx context.Context, idGroup int32, idUser, idAdmin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembership", ctx, idGroup, idUser, idAdmin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMembership indicates an expected call of CreateMembership.
func (mr *MockMembershipProviderMockRecorder) CreateMembership(ctx, idGroup, idUser, idAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembership", reflect.TypeOf((*MockMembershipProvider)(nil).CreateMembership), ctx, idGroup, idUser, idAdmin)
}

// DeleteMembership mocks base method.
func (m *MockMembershipProvider) DeleteMembership(ctx context.Context, idGroup int32, idUser string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembership", ctx, idGroup, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMembership indicates an expected call of DeleteMembership.
func (mr *MockMembershipProviderMockRecorder) DeleteMembership(ctx, idGroup, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembership", reflect.TypeOf((*MockMembershipProvider)(nil).DeleteMembership), ctx, idGroup, idUser)
}

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserProvider) CreateUser(ctx context.Context, idUser, userName string, idChat int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, idUser, userName, idChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserProviderMockRecorder) CreateUser(ctx, idUser, userName, idChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserProvider)(nil).CreateUser), ctx, idUser, userName, idChat)
}

// DeleteUser mocks base method.
func (m *MockUserProvider) DeleteUser(ctx context.Context, idUser int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserProviderMockRecorder) DeleteUser(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserProvider)(nil).DeleteUser), ctx, idUser)
}

// UpdateUser mocks base method.
func (m *MockUserProvider) UpdateUser(ctx context.Context, userName, idUser string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userName, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserProviderMockRecorder) UpdateUser(ctx, userName, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserProvider)(nil).UpdateUser), ctx, userName, idUser)
}

// MockDbProvider is a mock of DbProvider interface.
type MockDbProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDbProviderMockRecorder
}

// MockDbProviderMockRecorder is the mock recorder for MockDbProvider.
type MockDbProviderMockRecorder struct {
	mock *MockDbProvider
}

// NewMockDbProvider creates a new mock instance.
func NewMockDbProvider(ctrl *gomock.Controller) *MockDbProvider {
	mock := &MockDbProvider{ctrl: ctrl}
	mock.recorder = &MockDbProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbProvider) EXPECT() *MockDbProviderMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockDbProvider) CreateEvent(ctx context.Context, idGroup int32, category, nameEvent string, timeStart time.Time, duration time.Duration, linkToVideo, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, idGroup, category, nameEvent, timeStart, duration, linkToVideo, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockDbProviderMockRecorder) CreateEvent(ctx, idGroup, category, nameEvent, timeStart, duration, linkToVideo, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockDbProvider)(nil).CreateEvent), ctx, idGroup, category, nameEvent, timeStart, duration, linkToVideo, status)
}

// CreateGroup mocks base method.
func (m *MockDbProvider) CreateGroup(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockDbProviderMockRecorder) CreateGroup(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockDbProvider)(nil).CreateGroup), ctx, groupName)
}

// CreateMembership mocks base method.
func (m *MockDbProvider) CreateMembership(ctx context.Context, idGroup int32, idUser, idAdmin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembership", ctx, idGroup, idUser, idAdmin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMembership indicates an expected call of CreateMembership.
func (mr *MockDbProviderMockRecorder) CreateMembership(ctx, idGroup, idUser, idAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembership", reflect.TypeOf((*MockDbProvider)(nil).CreateMembership), ctx, idGroup, idUser, idAdmin)
}

// CreateUser mocks base method.
func (m *MockDbProvider) CreateUser(ctx context.Context, idUser, userName string, idChat int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, idUser, userName, idChat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDbProviderMockRecorder) CreateUser(ctx, idUser, userName, idChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDbProvider)(nil).CreateUser), ctx, idUser, userName, idChat)
}

// DeleteEvent mocks base method.
func (m *MockDbProvider) DeleteEvent(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockDbProviderMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockDbProvider)(nil).DeleteEvent), ctx, id)
}

// DeleteGroup mocks base method.
func (m *MockDbProvider) DeleteGroup(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockDbProviderMockRecorder) DeleteGroup(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockDbProvider)(nil).DeleteGroup), ctx, id)
}

// DeleteMembership mocks base method.
func (m *MockDbProvider) DeleteMembership(ctx context.Context, idGroup int32, idUser string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembership", ctx, idGroup, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMembership indicates an expected call of DeleteMembership.
func (mr *MockDbProviderMockRecorder) DeleteMembership(ctx, idGroup, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembership", reflect.TypeOf((*MockDbProvider)(nil).DeleteMembership), ctx, idGroup, idUser)
}

// DeleteUser mocks base method.
func (m *MockDbProvider) DeleteUser(ctx context.Context, idUser int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDbProviderMockRecorder) DeleteUser(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDbProvider)(nil).DeleteUser), ctx, idUser)
}

// UpdateEvent mocks base method.
func (m *MockDbProvider) UpdateEvent(ctx context.Context, nameEvent string, timeStart time.Time, duration time.Duration, linkToVideo, status string, idEvent int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, nameEvent, timeStart, duration, linkToVideo, status, idEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockDbProviderMockRecorder) UpdateEvent(ctx, nameEvent, timeStart, duration, linkToVideo, status, idEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockDbProvider)(nil).UpdateEvent), ctx, nameEvent, timeStart, duration, linkToVideo, status, idEvent)
}

// UpdateGroup mocks base method.
func (m *MockDbProvider) UpdateGroup(ctx context.Context, nameGroup string, idGroup int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, nameGroup, idGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockDbProviderMockRecorder) UpdateGroup(ctx, nameGroup, idGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockDbProvider)(nil).UpdateGroup), ctx, nameGroup, idGroup)
}

// UpdateUser mocks base method.
func (m *MockDbProvider) UpdateUser(ctx context.Context, userName, idUser string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userName, idUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDbProviderMockRecorder) UpdateUser(ctx, userName, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDbProvider)(nil).UpdateUser), ctx, userName, idUser)
}
